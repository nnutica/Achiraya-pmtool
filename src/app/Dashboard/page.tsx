"use client";
import { useEffect, useState } from "react";
import { Task } from "@/types/task";
import { fetchTasks, updateTask, deleteTask } from "@/libs/taskservice";
import TaskCard from "../Components/TaskCard";
import AddTaskSidebar from "../Components/Addtasksidebar";
import TaskDetailSidebar from "../Components/TaskDetailSidebar";

export default function Dashboard() {
    // State ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const [tasks, setTasks] = useState<Task[]>([]);
    const [showAddSidebar, setShowAddSidebar] = useState(false);
    const [showDetailSidebar, setShowDetailSidebar] = useState(false);
    const [selectedTask, setSelectedTask] = useState<Task | null>(null);

    const loadTasks = async () => {
        const data = await fetchTasks();
        setTasks(data);
    };

    useEffect(() => {
        loadTasks();
    }, []);

    const handleTaskClick = async (task: Task) => {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà rejected ‡∏´‡∏£‡∏∑‡∏≠ cancelled ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (task.status === "rejected" || task.status === "cancelled") {
            // ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
            if (confirm(`Are you sure you want to delete this ${task.status} task?`)) {
                try {
                    // ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    await deleteTask(task.id);

                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
                    setTasks(prevTasks => prevTasks.filter(t => t.id !== task.id));

                    // ‡∏ñ‡πâ‡∏≤ task ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sidebar ‡∏Ñ‡∏∑‡∏≠ task ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î sidebar
                    if (selectedTask?.id === task.id) {
                        setShowDetailSidebar(false);
                        setSelectedTask(null);
                    }

                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    alert(`Task "${task.title}" has been deleted successfully.`);
                } catch (error) {
                    console.error("Error deleting task:", error);
                    alert("Failed to delete task. Please try again.");
                }
                return;
            } else {
                // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
                return;
            }
        }

        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà rejected ‡∏´‡∏£‡∏∑‡∏≠ cancelled ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
        setSelectedTask(task);
        setShowDetailSidebar(true);

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Unread ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô Wait Approve
        if (task.status === "Unread") {
            try {
                await updateTask(task.id, { status: "Wait Approve" });

                setTasks(prevTasks =>
                    prevTasks.map(t =>
                        t.id === task.id
                            ? { ...t, status: "Wait Approve" }
                            : t
                    )
                );

                setSelectedTask({ ...task, status: "Wait Approve" });
            } catch (error) {
                console.error("Error updating task status:", error);
            }
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const handleTaskUpdate = (updatedTask: Task) => {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï tasks state
        setTasks((prevTasks) =>
            prevTasks.map((task) =>
                task.id === updatedTask.id ? updatedTask : task
            )
        );

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï selectedTask state
        setSelectedTask(updatedTask);
    };

    return (
        <main className="container mx-auto px-4 py-8">
            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß */}
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold text-white">Task Dashboard</h1>
                <button
                    onClick={() => setShowAddSidebar(true)}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
                >
                    Add Task
                </button>
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô Urgent ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Task */}
            {tasks.filter(task => task.priority === "Urgent").length > 0 && (
                <div className="mb-8">
                    <h2 className="text-xl font-semibold mb-4 flex items-center text-red-600">
                        <span className="mr-2">üî¥</span> Urgent
                    </h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {tasks
                            .filter((task) => task.priority === "Urgent")
                            .map((task) => (
                                <TaskCard
                                    key={task.id}
                                    task={task}
                                    onClick={handleTaskClick}
                                />
                            ))}
                    </div>
                </div>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô High ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Task */}
            {tasks.filter(task => task.priority === "High").length > 0 && (
                <div className="mb-8">
                    <h2 className="text-xl font-semibold mb-4 flex items-center text-orange-600">
                        <span className="mr-2">üü†</span> High
                    </h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {tasks
                            .filter((task) => task.priority === "High")
                            .map((task) => (
                                <TaskCard
                                    key={task.id}
                                    task={task}
                                    onClick={handleTaskClick}
                                />
                            ))}
                    </div>
                </div>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô Medium ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Task */}
            {tasks.filter(task => task.priority === "Medium").length > 0 && (
                <div className="mb-8">
                    <h2 className="text-xl font-semibold mb-4 flex items-center text-yellow-600">
                        <span className="mr-2">üü°</span> Medium
                    </h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {tasks
                            .filter((task) => task.priority === "Medium")
                            .map((task) => (
                                <TaskCard
                                    key={task.id}
                                    task={task}
                                    onClick={handleTaskClick}
                                />
                            ))}
                    </div>
                </div>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô Low ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Task */}
            {tasks.filter(task => task.priority === "Low").length > 0 && (
                <div className="mb-8">
                    <h2 className="text-xl font-semibold mb-4 flex items-center text-green-600">
                        <span className="mr-2">üü¢</span> Low
                    </h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {tasks
                            .filter((task) => task.priority === "Low")
                            .map((task) => (
                                <TaskCard
                                    key={task.id}
                                    task={task}
                                    onClick={handleTaskClick}
                                />
                            ))}
                    </div>
                </div>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Task ‡πÉ‡∏î‡πÜ */}
            {tasks.length === 0 && (
                <div className="text-center py-12">
                    <p className="text-xl text-gray-500">No tasks found. Add your first task to get started!</p>
                    <button
                        onClick={() => setShowAddSidebar(true)}
                        className="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg"
                    >
                        Add Task
                    </button>
                </div>
            )}

            {/* Sidebars */}
            <AddTaskSidebar
                isOpen={showAddSidebar}
                onClose={() => {
                    setShowAddSidebar(false);
                    loadTasks();
                }}
            />

            <TaskDetailSidebar
                isOpen={showDetailSidebar}
                onClose={() => setShowDetailSidebar(false)}
                task={selectedTask}
                onTaskUpdate={handleTaskUpdate}
            />
        </main>
    );
}